%
%    \iffalse
%
% pdfpages.dtx Copyright (C) 2001 Andreas MATTHIAS
%
% This program may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.2 or later is part of all distributions of LaTeX 
% version 1999/12/01 or later.
%
% Please send error reports and suggestions for improvements to
%   Andreas MATTHIAS <amat@kabsi.at>.
%
%<*!package>
% ===================================================================
%  @LaTeX-package-file{
%    author         = {Andreas MATTHIAS},
%    version        = "0.1i",
%    date           = "17 April 2001",
%    filename       = "pdfpages.sty",
%    address        = "",
%    telephone      = "",
%    email          = "amat@kabsi.at",
%    codetable      = "ISO/ASCII",
%    keywords       = "pdfLaTeX, PDF, include, page",
%    dependences    = "ifthen, graphicx, eso-pic",
%    supported      = "yes",
%    docstring      = "Package for including pages of external
%                      PDF documents. (Requiring pdfLaTeX.)"
%  }
% ===================================================================
%</!package>
%
%<*dtx>
          \ProvidesFile{pdfpages.dtx}
%</dtx>
%    \fi
%
%    \CheckSum{973}
%%
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
%    \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{pdfpages}[2001/04/17 v0.1i Include pages of external PDF documents (AM)]
% \fi
%        \ProvidesFile{pdfpages.dtx}[2001/04/17 v0.1i Include pages of external PDF documents (AM)]
% \iffalse
%
%<*driver>
\documentclass[a4paper, 10pt,draft]{ltxdoc}
\usepackage{array}
  \newcommand{\versionlist}{%
    \setlength{\topsep}{0pt}%
    \setlength{\itemsep}{0pt}%
    \setlength{\leftmargin}{20pt}%
    \setlength{\parsep}{0pt}}
\begin{document}
  \DocInput{pdfpages.dtx}
\end{document}
%</driver>
%    \fi
%
%  \GetFileInfo{pdfpages.dtx}
%
%
%    \title{The \textsf{pdfpages} Package\thanks{This file
%           has version number \fileversion, last revised \filedate.}}
%    \author{Andreas MATTHIAS\\ \texttt{amat@kabsi.at}} 
%
%
%    \date{\filedate}
%
%    \maketitle
%
%    \begin{abstract}
%       \noindent
%       This package makes it easy to include pages of external
%       PDF documents. It is based on pdfLaTeX and does 
%       \textit{not} work with \LaTeX.
%    \end{abstract}
%
%    \tableofcontents
%
%
%    \section{Introduction}
%    When creating PDF documents it is sometimes useful to include
%    pages from other, external PDF documents. This can be done
%    with the |\includegraphics| command from the
%    \texttt{graphics} package. But a simple
%    |\includegraphics{doc.pdf}| normally produces
%    `|Overfull \hbox|' and `|Overfull \vbox|' warnings,
%    because the size of the included pages do not match to the
%    print space. To circumvent this, the included pages have to
%    be scaled (reduced). However, sometimes this is not desirable.
%    
%    The \texttt{pdfpages} package makes it easy to include one or
%    more pages of external PDF documents without worrying about
%    the print space. It even gives you the possibility
%    to arrange two or four logical pages on one physical sheet
%    of paper. (Like `psnup'.)
%    
%    \section{Usage}
%    \subsection{Package Options}
%    |\usepackage[|\meta{options}|]{pdfpages}|
%    
%    \begin{quote}
%    \begin{tabular}{@{}r@{~}r@{~}>{\raggedright}p{.7\linewidth}}
%        \meta{option} --  & |final|:& Include pages. This is the
%                                      default. \tabularnewline[.25\baselineskip]
%                          & |draft|:& Do not include pages, but
%                                      print a box and the filename
%                                      instead.
%    \end{tabular}
%    \end{quote}
%    
%    
%    \subsection{Commands}
%    
%    \DescribeMacro{\includepdf}
%    Pages of external PDF documents are included as follows:
%    
%    \medskip\noindent
%    |\includepdf[|\meta{key=val}|]{|\meta{filename}|}|
%    
%    \begin{quote}
%    \begin{tabular}{@{}l@{\,--~}>{\raggedright}p{.8\linewidth}}
%        \meta{key=val}   & A comma separated list of options
%                   using the \meta{key}=\meta{value} syntax.
%                   \tabularnewline
%        \meta{filename} & The filename of the PDF document.
%    \end{tabular}
%    \end{quote}
%    
%    \noindent
%    Possible options specific to |\includepdf| are:
%    
%    \newcommand{\df}[1]{(Default: |#1|)}
%    
%    \begin{description}
%      \item[pages] Select pages to include. The argument is a comma
%                   separated list containing page numbers (|pages={3,5,6}|),
%                   areas of page numbers (|pages={4-9}|) or any combination
%                   of them. To insert empty pages use the tag |{}|.\par
%                   E.\,g.: |pages={3,{},8-11,15}|. This will include the
%                   page 3, an empty page, the pages 8, 9, 10, 11, and 15.
%      \item[nup] Put multiple logical pages on one physical sheet of paper.
%                 Possible values are: 1, 2 and 4. \df{nup=1}
%      \item[landscape] Include pages in landscape format. See
%                  section\,\ref{landscape} for more information
%                  on landscape format.
%                  Either `true' or `false' (or no value, which
%                  ie equivalent to `true'). \df{landscape=false}
%       \item[turn] Some pages are displayed in landscape orientation. With
%                   \texttt{turn=false} this can be prohibit.
%                   Either `true' or `false' (or no value, which
%                   is equivalent to `true'). \df{turn=true}
%      \item[openright] Put the first page on the right side. (Just in
%                       combination  with |nup=2| and |nup=4|.)
%                       Either `true' or `false' (or no value, which
%                       is equivalent to `true'). \df{openright=false}
%      \item[frame] Put a frame around each logical page. Either `true'
%                   or `false' (or no value, which is equivalent to `true').
%                   \df{frame=false}
%
%      \item[deltax] Put some space between the logical pages in
%                    horizontal direction. The argument should be one
%                    dimension. See figure\,\ref{layout}. \df{deltax=0}
%      \item[deltay] Put some space between the logical pages in
%                    vertical direction. The argument should be one
%                    dimension. See figure\,\ref{layout}. \df{deltay=0}
%      \item[offset] Displace the origin of the included pages.
%                    The argument should be two dimensions, separated
%                    by space. See figure\,\ref{layout}. \df{offset=0 0}
%      \item[pagecommand] \LaTeX{} commands, which are executed on each
%                         physical sheet of paper.
%                         \df{pagecommand=\{\bslash thispagestyle\{empty\}\}}
%
%      \item[link] With this option the included pages become a target for
%                  a hyperlink. The name of the link is 
%                  `\texttt{\meta{filename}.\meta{page number}}'.
%                  \meta{filename} is equal to the \meta{filename} of
%                  \verb|\includepdf|, i.\,e. potential file extensions
%                  are not stript.
%                  Either `true' or `false' (or no value, which
%                  is equivalent to `true').
%                  \df{link=false}
%      \item[linkname] Change the default linkname created by the option 
%                      \texttt{link}. Instead of the \meta{filename} the
%                      value of this option is used. E.\,g. \texttt{
%                      linkname=mylink} produces the linknames
%                      `\texttt{mylink.\meta{page number}}'.\\
%                      \df{linkname=\meta{filename}.\meta{page number}}
%      \item[linkfit] Specify the way the viewer displays a linked page.
%                     This option changes the default behavior of the
%                     the option \texttt{link}.
%                     Possible values are: \texttt{fitb}, \texttt{fith},
%                     \texttt{fitv}, \texttt{fitr}, 
%                     \texttt{xyz zoom \meta{integer}}, etc.
%                     These are destinations (|\pdfdest|) like they are
%                     described in \cite{pdftex}.
%                     \df{linkfit=fitr}
%
%      \item[linktodoc] Let the included pages be a hyperlink to the document
%                       from which they were extracted.
%                       Either `true' or `false' (or no value, which
%                       is equivalent to `true'). \df{linktodoc=false}
%      \item[linkfilename] Set the name (with path) of the file to be
%                          linked to by the option \texttt{linktodoc}.
%                          You will hardly ever need this option.
%                          \df{linkfilename=\meta{filename}}
%      \item[linktodocfit] By default the option \texttt{linktodoc} opens
%                          the page in `Fit in Window' view. With this
%                          option another view can be specified.
%                          Possible values are the legal PDF tokens:
%                          \texttt{/FitH} \meta{top}, \texttt{/FitV} \meta{left}, etc.
%                          (See \cite{PDFRef} for more details.)
%                          \df{linktodocfit=/Fit}
%
%      \item[thread] Combine pages to an article thread.
%                   Either `true' or `false' (or no value, which
%                   is equivalent to `true'). \df{thread=false}
%      \item[threadname] Several thread are distinguished by their names.
%                        By default this name is equal to the filename. But it
%                        can be changed with this option. This is useful if 
%                        the same file is included twice or more times and
%                        should not be combined to one single thread.
%                        \df{threadname=\meta{filename}}
%    \end{description}
%    
%
%    \begin{figure}
%    \centering\input{pic.tex}
%    \caption{Layout}
%    \label{layout}
%    \end{figure}
%
%
%    The |\includepdf| command calls the |\includegraphics| command from the
%    |graphicx| (actually |graphics|) package, which makes it possible to
%    use the options of |\includegraphics| too.
%    All options which are not interpreted by |\includepdf| are passed to
%    |\includegraphics|.
%    This way it is possible e.\,g.~to use the `trim' and `clip' options 
%    of \verb|\includegraphics| by passing them to \verb|\includepdf|, to
%    include only parts of a page. (Maybe to cut off the header and footer
%    of the included pages.)
%    
%    
%    \DescribeMacro{\includepdfset}
%    If one needs the same options for |\includepdf| all the time, it is
%    possible to define global options with |\includepdfset|. The
%    argument of |\includepdfset| is a comma separated list of options,
%    using the \meta{key}=\meta{value} syntax.
%    These options are processed each time |\includepdf| is called.
%    Local options (passed as an optional argument directly to |\includepdf|)
%    are overwriting global options:
%    \begin{quote}
%       |\includepdfset{|\meta{global options}|}|\\
%       |\includepdf[|\meta{local options}|]{pdf-file}|
%    \end{quote}
%    Only options specific to this package can be made global by
%    |\includepdfset|. Options of the graphicx package are not
%    concerned.
%
%    \bigskip
%    \DescribeMacro{\threadinfodict}
%    A thread information dictionary contains information about the
%    thread, such as its title, author, and creation date.
%    Use the macro |\threadinfodict| to set these entries.
%    This macro has one argument containing the thread information
%    dictionary in low-level PDF commands. See \cite{PDFRef} for
%    more information. This macro can be redefined. E.\,g.:
%    
%    |\renewcommand{\threadinfodict}|\\\hspace*{\parindent}
%    |{/I << /Title (My first thread) /Author (That's me!) >>}|
%    
%    
%
%    \subsection{The Layout}
%    
%    The default layout can be changed by the options |deltax|,
%    |deltay| and |offset|. Figure\,\ref{layout} shows the
%    meaning of these options.
%    
%    The included logical pages are being centered on the physical
%    sheet of paper by default. To displace them use the |offset|
%     option, whose argument should be two dimensions. E.\,g.\
%    |offset=10mm 14mm| means that the logical pages are displaced
%    by 10\,mm in horizontal direction and by 14\,mm in vertical
%    direction.
%    
%    By default logical pages are being arranged side by side.
%    To put some space between them, use the options |deltax|
%    and |deltay|. Figure\,\ref{layout} shows the meaning of
%    |deltax| and |deltay|.
%    
%    The layout options |deltax|, |deltay| and |offset|
%    \textit{always} refer to a sheet of paper in portrait
%    orientation. No matter wether you are including pages
%    in landscape orientation or in portrait orientation
%    or wether your PDF viewer shows the page in landscape
%    mode. 
%    
%    If you are confused about horizontal\,(|x|)
%    and vertical\,(|y|) directions, just set the option
%    |turn=false|. Now your PDF viewer shows the pages in
%    the \textit{same} orientation as in figure\,\ref{layout}.
%    And the options |deltax|, |deltay| and |offset| have
%    the \textit{same} meaning as in figure\,\ref{layout}.
%    Regardless of any other options.
%
%
%    \subsection{Remarks on Landscape Format}
%    \label{landscape}
%    To include pages in landscape format use the option |landscape|.
%    However, this only works satisfyingly, if the included pages are
%    in `real' landscape format. This means that the pages are 
%    wider than high. In the PDF file such pages are described
%    e.\,g. as:
%    \begin{verbatim}
%    /MediaBox [0 0 841.887 595.273]
%    \end{verbatim}
%    \vskip-\bigskipamount
%    
%    Nevertheless there exists another way, how to describe a
%    landscape page in a PDF file. E.\,g.:
%    \begin{verbatim}
%    /MediaBox [0 0 595.273 841.887]
%    /Rotate 90
%    \end{verbatim}
%    \vskip-\bigskipamount
%
%    This means that the page is in portrait format (the page is
%    higher than wide), but it is rotated by 90 degrees. I call
%    this a `fake' landscape. This is what you get with the
%    following \LaTeX{} (pdfLaTeX) code fragment:
%    \begin{verbatim}
%    \usepackage{lscape}
%    ...
%    \begin{landscape}
%    \pdfpageattr{/Rotate 90}
%    ...
%    \end{landscape}
%    \end{verbatim}
%    \vskip-\bigskipamount
%    
%    Keep in mind that `real' and `fake' landscape pages look
%    the same in the PDF Viewer. And unfortunately until now
%    pdfLaTeX does not support the user with any information
%    about the |/Rotate| attribute.
%    
%    Here is an example, how to include `real' landscape pages:
%    
%    \trivlist \item\relax \hskip\parindent
%    |\includepdf[page=4, landscape]{|\meta{file}|}|
%    \endtrivlist
%    
%    To include `fake' landscape pages, you have to rotate the
%    pages by using the option |angle=-90| like in
%    the following example:
%    
%    \trivlist \item\relax \hskip\parindent
%    |\includepdf[page=4, landscape, angle=-90]{|\meta{file}|}|
%    \endtrivlist
%    
%    Sorry, but there is no way to do this automatically. 
%    
%
%    \section{Acknowledgment}
%    I would like to thank \textsc{Rolf Niepraschk} and
%    \textsc{Heiko Oberdiek} for their useful
%    hints and suggestions. As well as \textsc{Ross Moore},
%    who encouraged me to implement the hypertext features.
%
%
%    \StopEventually{}
%
%    \iffalse
%<*package>
%    \fi
%    \section{Implementation}
%    \begin{macrocode}
%    \end{macrocode}
%    \subsection{Checking}
%    Check for using pdfLaTeX. 
%    -- If \texttt{graphics.sty} is loaded before this package,
%    \texttt{pdfoutput} may be undefined, even if pdfLaTeX
%    is used, because some \texttt{graphic.cfg} undefine
%    \texttt{pdfoutput} (\verb|\let\pdfoutput\@undefined|),
%    if the document contains the line \verb|\pdfoutput=0|.
%    \begin{macrocode}
\begingroup
\@ifundefined{pdfoutput}
    {\PackageError{pdfpages}
            {You're either not using pdfLaTeX\MessageBreak
             or have turn off PDF output.\MessageBreak
             `pdfpages' works only with pdfLaTeX\MessageBreak
             and PDF output}
            {Use `pdflatex' instead of `latex'\MessageBreak
             and set output to PDF (use: \pdfoutput = 1)!}
     \expandafter\endinput
    }{}
%    \end{macrocode}
%    Check for producing PDF output.
%    \begin{macrocode}
\ifnum\pdfoutput=0
    \PackageError{pdfpages}
            {You don't produce PDF output, which\MessageBreak
             is required for the `pdfpages' package}
            {Set output to PDF. (use: \pdfoutput = 1)}
    \expandafter\endinput
\fi
\endgroup
%    \end{macrocode}
%    Check for \texttt{pdftex.def} version: This is done with
%    the following macro, which is derived from
%    \verb|\@ifpackagelater|
%    from the standard \LaTeX{} kernel.
%    \begin{macrocode}
\def\AM@ifdriverlater{\@ifl@ter{def}}
%    \end{macrocode}
%    Check for \texttt{pdftex.def} version \texttt{2000/05/12 v0.02u} or higher:
%    \begin{list}{$\ast$}{\versionlist}
%    \item support for multipage PDF files, option `page' added (HO).
%    \end{list}
%    \begin{macrocode}
\AtBeginDocument{%
  \AM@ifdriverlater{pdftex}{2000/05/12}{}{%
      \PackageError{pdfpages}{%
           You have an old `pdftex.def'.\MessageBreak%
           There is no multipage support\MessageBreak%
           in `pdftex.def' < 0.02u.\MessageBreak%
           Update your `pdftex.def'}
           {Update your `pdftex.def'!}}
%    \end{macrocode}
%    Check for \texttt{pdftex.def} version \texttt{2000/09/14 v0.03d} or higher:
%    \begin{list}{$\ast$}{\versionlist}
%    \item Fixes for `viewport' and `trim' (HO).
%    \item Clip support added for viewport and trim (HO).
%    \end{list}
%    \begin{macrocode}
  \AM@ifdriverlater{pdftex}{2000/09/14}{}{%
      \PackageWarning{pdfpages}{%
           You have an old `pdftex.def'.\MessageBreak%
           There might be problems with\MessageBreak%
           the `trim' and `clip' options.\MessageBreak%
           Update your `pdftex.def'!\MessageBreak}}
}% AtBeginDocument
%    \end{macrocode}
%    \subsection{Required Packages}
%    \begin{macrocode}
\RequirePackage{ifthen, graphicx, eso-pic, calc}
%    \end{macrocode}
%    \subsection{Package Options}
%    \begin{macrocode}
\newcommand{\AM@draft}{false}
\DeclareOption{draft}{\def\AM@draft{true}}  
\DeclareOption{final}{\def\AM@draft{false}} 
\ProcessOptions  
%    \end{macrocode}
%    \subsection{Booleans}
%    \begin{macrocode}
\newboolean{AM@openright}\setboolean{AM@openright}{false}
\newboolean{AM@frame}\setboolean{AM@frame}{false}
\newboolean{AM@landscape}\setboolean{AM@landscape}{false}
\newboolean{AM@turn}\setboolean{AM@turn}{true}
\newboolean{AM@thread}\setboolean{AM@thread}{false}
\newboolean{AM@link}\setboolean{AM@link}{false}
\newboolean{AM@linktodoc}\setboolean{AM@linktodoc}{false}
\newboolean{AM@compatibility}\setboolean{AM@compatibility}{false}
%    \end{macrocode}
%    \subsection{Commands}
%    Define default values.
%    \begin{macrocode}
\newcommand{\AM@xoffset}{0pt}\newcommand{\AM@yoffset}{0pt}
\newcommand{\AM@deltax}{0pt}\newcommand{\AM@deltay}{0pt}
\newcommand{\AM@xpos}{0pt}\newcommand{\AM@ypos}{0pt}
\newcommand{\AM@rotate}{0}
\newcommand{\AM@lscape@roti}{0}\newcommand{\AM@lscape@rotii}{0}
\newcommand{\AM@pagecommand}{\thispagestyle{empty}}
\newcommand{\AM@fbox}{}\newcommand{\AM@ph}{}
\newcommand{\AM@pagestemp}{1}
\newcommand{\AM@page}{}
\newcommand{\AM@pagei}{}\newcommand{\AM@pageii}{}
\newcommand{\AM@pageiii}{}\newcommand{\AM@pageiv}{}
\newcommand{\AM@@smallpage}{}\newcommand{\AM@smallpage}{\AM@@smallpage}
\newcommand{\AM@firstpage}{1}\newcommand{\AM@lastpage}{1}
\newcommand{\AM@nup}{1}
\newcommand{\AM@linkname}{}
\newcommand{\AM@threadname}{}
\newcommand{\AM@linkfit}{fitr}
\newcommand{\AM@linktodocfit}{/Fit}
\newcommand{\AM@setunit}{\setlength{\unitlength}{1pt}}
\newcommand{\threadinfodict}{}
%    \end{macrocode}
%    \macro{\AM@setlscape}
%    Check, if `pdflscape.sty' is loaded.
%    This package is necessary, if landscape pages are produced
%    \textit{and} `thumbpdf.sty' is used.
%    \begin{macrocode}
\newif\ifAM@thumbpdf
\newif\ifAM@pdflscape
\newcommand{\AM@setlscape}{}
\AtBeginDocument{%
  \@ifpackageloaded{thumbpdf}{\AM@thumbpdftrue}{\AM@thumbpdffalse}%
  \@ifpackageloaded{pdflscape}{\AM@pdflscapetrue}{\AM@pdflscapefalse}%
  \ifAM@thumbpdf
    \ifAM@pdflscape
      \def\AM@setlscape{\PLS@Rotate{90}}%
    \else
      \def\AM@setlscape{\pdfpageattr{/Rotate 90}\AM@thumbpdfwarning}\fi
  \else
    \def\AM@setlscape{\pdfpageattr{/Rotate 90}}\fi}
\newif\ifAM@thumbpdfwarning
\newcommand{\AM@thumbpdfwarning}{%
  \ifAM@thumbpdfwarning\else\global\AM@thumbpdfwarningtrue
  \PackageWarning{pdfpages}{%
    You are using `thumbpdf.sty' but not\MessageBreak
    `pdflscape.sty'. \MessageBreak
    Please include `pdflscape.sty' in  your document\MessageBreak
    to get a pleasant PDF document with thumbs.\MessageBreak}\fi}
%    \end{macrocode}
%    \macro{\includepdfset}
%    This command sets global options for \verb|\includepdf|.
%    \begin{macrocode}
\newcommand*{\includepdfset}[1]{\setkeys{Gin}{#1}}
%    \end{macrocode}
%    \macro{\includepdf}
%    This command includes one or more pages of an external 
%    PDF document.
%    \begin{macrocode}
\newcommand*{\includepdf}[2][]{%
  \begingroup% setkey
  \filename@parse{#2}
  \@ifundefined{filename@ext}
    {\def\AM@linkfilename{#2.pdf}}
    {\def\AM@linkfilename{#2}}%
  \def\AM@linkname{#2}%
  \def\AM@threadname{#2}%
%    \end{macrocode}
%    Read in optional parameters.
%    \begin{macrocode}
  \setkeys{Gin}{draft=\AM@draft, #1}%
%    \end{macrocode}
%    If the options |firstpage| and/or |lastpage| are used,
%    switch to compatibility mode.
%    \begin{macrocode}
  \ifthenelse{\boolean{AM@compatibility}}
    {\def\AM@pagestemp{\AM@firstpage-\AM@lastpage}}{}%
%    \end{macrocode}
%    Some preparations before starting the output.
%    \begin{macrocode}
  \ifthenelse{\boolean{AM@frame}}
         {\let\AM@fbox\fbox}{\let\AM@fbox\relax}%
  \expandafter\AM@pagenumbers\expandafter{\AM@pagestemp}%
  \ifthenelse{\boolean{AM@openright}}{\AM@openright}{}%
  \AM@setphantom
  \AM@filluppagelist
  \setlength{\fboxsep}{0pt}%
%    \end{macrocode}
%    This loop arranges one or more PDF pages onto each sheet
%    of paper.
%    \begin{macrocode}
  \whiledo{\not\boolean{endofpagelist}}{%
    \newpage
%    \end{macrocode}
%    Some pages are displayed in landscape format,
%    if the |turn|-Option is `true'.
%    \begin{macrocode}
    \ifthenelse{\boolean{AM@turn}}
      {\ifthenelse{\boolean{AM@landscape}}
         {\ifthenelse{\equal{1}{\AM@nup}}{\AM@setlscape}{}%
          \ifthenelse{\equal{4}{\AM@nup}}{\AM@setlscape}{}}
         {\ifthenelse{\equal{2}{\AM@nup}}{\AM@setlscape}{}}%
      }{}%
    \AM@getpages{\AM@nup}%
%    \end{macrocode}
%    Arrange one PDF pages per sheet. (\texttt{nup=1})
%    \begin{macrocode}
      \ifthenelse{\equal{1}{\AM@nup}}{%
         \def\AM@@smallpage{%
           \includegraphics[page=\AM@page, angle=\AM@lscape@rotii,
                            angle=\AM@rotate, #1]{#2}}%
         \AddToShipoutPicture{\AM@setunit%
           \let\AM@page\AM@pagei\AM@isphantom
           \AM@output{0}{\AM@smallpage}}%
        }{}%
%    \end{macrocode}
%    Arrange two PDF pages per sheet. (\texttt{nup=2})
%    \begin{macrocode}
      \ifthenelse{\equal{2}{\AM@nup}}{%
        \def\AM@@smallpage{%
          \includegraphics[page=\AM@page, angle=90,
                           angle=\AM@lscape@roti, angle=\AM@rotate,
                           scale=.7071, #1]{#2}}%
        \AddToShipoutPicture{\AM@setunit%
          \ifthenelse{\boolean{AM@landscape}}
            {\let\AM@page\AM@pagei\AM@isphantom
             \AM@output{1}{\AM@smallpage}%
             \let\AM@page\AM@pageii\AM@isphantom
             \AM@output{2}{\AM@smallpage}}
            {\let\AM@page\AM@pagei\AM@isphantom
             \AM@output{2}{\AM@smallpage}%
             \let\AM@page\AM@pageii\AM@isphantom
             \AM@output{1}{\AM@smallpage}}}%
      }{}%
%    \end{macrocode}
%    Arrange four PDF pages per sheet. (\texttt{nup=4})
%    \begin{macrocode}
      \ifthenelse{\equal{4}{\AM@nup}}{%
        \def\AM@@smallpage{%
          \includegraphics[page=\AM@page, angle=\AM@lscape@rotii,
                           angle=\AM@rotate, scale=.5, #1]{#2}}%
        \AddToShipoutPicture{\AM@setunit%
          \ifthenelse{\boolean{AM@landscape}}
            {\let\AM@page\AM@pagei\AM@isphantom
             \AM@output{5}{\AM@smallpage}%
             \let\AM@page\AM@pageii\AM@isphantom
             \AM@output{3}{\AM@smallpage}%
             \let\AM@page\AM@pageiii\AM@isphantom
             \AM@output{6}{\AM@smallpage}%
             \let\AM@page\AM@pageiv\AM@isphantom
             \AM@output{4}{\AM@smallpage}}
            {\let\AM@page\AM@pagei\AM@isphantom
             \AM@output{3}{\AM@smallpage}%
             \let\AM@page\AM@pageii\AM@isphantom
             \AM@output{4}{\AM@smallpage}%
             \let\AM@page\AM@pageiii\AM@isphantom
             \AM@output{5}{\AM@smallpage}%
             \let\AM@page\AM@pageiv\AM@isphantom
             \AM@output{6}{\AM@smallpage}}}%
     }{}%
%    \end{macrocode}
%    \begin{macrocode}
    \AM@pagecommand
    \hskip0pt
    \newpage
    \ifAM@pdflscape\PLS@Rotate{0}\fi
    \ClearShipoutPicture
  }% whiledo
  \endgroup% setkey
  \ClearShipoutPicture
}% includepdf
%    \end{macrocode}
%    \macro{\AM@isphantom}
%    Check, if current page is an empty (phantom) page.
%    \begin{macrocode}
\newif\ifphantompage
\newcommand{\AM@isphantom}{%
  \expandafter\ifx\expandafter\\\AM@page\\%
    \let\AM@page\AM@phantompage
    \let\AM@ph\phantom
    \phantompagefalse
  \else
    \let\AM@ph\relax
    \phantompagetrue
  \fi}
%    \end{macrocode}
%    \macro{\AM@hyper}
%    Add links and threads to the included pages.
%    \begin{macrocode}
\newcommand{\AM@hyper}{%
%    \end{macrocode}
%    Page is a target for a link.
%    \begin{macrocode}
  \ifphantompage
  \ifthenelse{\boolean{AM@link}}{%
    \pdfdest name {\AM@linkname.\AM@page}%
             \AM@linkfit}{}%
  \fi
%    \end{macrocode}
%    Page is linked to the original document.
%    \begin{macrocode}
  \ifthenelse{\boolean{AM@linktodoc}}{%
    \@tempcntb\AM@page\relax
    \advance\@tempcntb by -1
    \pdfannot width \wd\@tempboxa
              height \ht\@tempboxa
              depth \dp\@tempboxa
              {/Subtype /Link /Border [0 0 0]
               /A << /S /GoToR
                     /F (\AM@linkfilename)
                     /D [\the\@tempcntb \AM@linktodocfit] 
                     /NewWindow true >>}}{}%
%    \end{macrocode}
%    Page is a bead in a thread.
%    \begin{macrocode}
  \ifphantompage
  \ifthenelse{\boolean{AM@thread}}{%
      \pdfthread width \wd\@tempboxa
                 height \ht\@tempboxa
                 depth \dp\@tempboxa
                 attr {\threadinfodict}
                 name {\AM@threadname}}{}%
  \fi}%
%    \end{macrocode}
%    \macro{\AM@output}
%    Place pages. The content of |#2| is placed at the
%    position of |#1|.\\
%    Meaning of |#1|:
%    \begin{list}{}{\setlength{\itemsep}{2pt}\setlength{\parsep}{0pt}\setlength{\leftmargin}{\parindent}}
%    \item  0: nup=1
%    \item  1: nup=2, top page
%    \item  2: nup=2, bottom page
%    \item  3: nup=4, top left page
%    \item  4: nup=4, top right page
%    \item  5: nup=4, bottom left page
%    \item  6: nup=4, bottom right page
%    \end{list}
%    \begin{macrocode}
\newcommand{\AM@output}[2]{%
  \setbox\@tempboxa=\hbox{\AM@fbox{#2}}%
  \def\AM@add{+}%
  \if@twoside\ifodd\value{page}\else\def\AM@add{-}\fi\fi
  \ifcase#1 % nup=1
    \def\AM@xpos{.5\paperwidth - .5\wd\@tempboxa \AM@add\AM@xoffset}%
    \def\AM@ypos{.5\paperheight - .5\ht\@tempboxa - .5\dp\@tempboxa
                 \AM@add\AM@yoffset}%
  \or % nup=2
    \def\AM@xpos{.5\paperwidth - .5\wd\@tempboxa \AM@add\AM@xoffset}%
    \def\AM@ypos{.5\paperheight + \AM@deltay*\real{.5} + \AM@yoffset
                 - .5\fboxrule}%
  \or
    \def\AM@xpos{.5\paperwidth - .5\wd\@tempboxa \AM@add\AM@xoffset}%
    \def\AM@ypos{.5\paperheight - \ht\@tempboxa - \dp\@tempboxa
                 - \AM@deltay*\real{.5} + \AM@yoffset + .5\fboxrule}%
  \or % nup=4
    \def\AM@xpos{.5\paperwidth - \wd\@tempboxa \AM@add\AM@xoffset
                 + .5\fboxrule - \AM@deltax*\real{.5}}%
    \def\AM@ypos{.5\paperheight + \AM@deltay*\real{.5} + \AM@yoffset
                 - .5\fboxrule}%
  \or
    \def\AM@xpos{.5\paperwidth \AM@add\AM@xoffset 
                 - .5\fboxrule + \AM@deltax*\real{.5}}%
    \def\AM@ypos{.5\paperheight + \AM@deltay*\real{.5} + \AM@yoffset
                 - .5\fboxrule}%
  \or
    \def\AM@xpos{.5\paperwidth - \wd\@tempboxa \AM@add\AM@xoffset
                 + .5\fboxrule - \AM@deltax*\real{.5}}%
    \def\AM@ypos{.5\paperheight - \ht\@tempboxa - \dp\@tempboxa
                 - \AM@deltay*\real{.5} + \AM@yoffset + .5\fboxrule}%
  \or
    \def\AM@xpos{.5\paperwidth \AM@add\AM@xoffset 
                 - .5\fboxrule + \AM@deltax*\real{.5}}%
    \def\AM@ypos{.5\paperheight - \ht\@tempboxa - \dp\@tempboxa
                 - \AM@deltay*\real{.5} + \AM@yoffset + .5\fboxrule}%
  \fi
  \setlength{\@tempdima}{\AM@xpos}%
  \edef\AM@xpos{\strip@pt\@tempdima}%
  \setlength{\@tempdima}{\AM@ypos}%
  \edef\AM@ypos{\strip@pt\@tempdima}%
  \put(\AM@xpos,\AM@ypos){%
    \AM@ph{\raisebox{\dp\@tempboxa}{%
      \AM@hyper
      \box\@tempboxa}}}%
} % AM@output
%    \end{macrocode}
%    \macro{\AM@pagelist}
%    This macro contains a list of page numbers, terminated with |\END|.
%    \begin{macrocode}
\newcommand{\AM@pagelist}{}
\newcommand{\saveAM@pagelist}{}
\newboolean{endofpagelist}
%    \end{macrocode}
%    \macro{\AM@pagenumbers}
%    Read in page numbers and store them in |\AM@pagelist|
%    \begin{macrocode}
\newcommand{\AM@pagenumbers}{1}
\def\AM@pagenumbers#1{%
  \AM@@pagenumbers#1,\END
  \let\saveAM@pagelist\AM@pagelist
  \edef\AM@pagelist{\saveAM@pagelist\noexpand\END}%
}
\newcommand{\AM@@pagenumbers}{}
\def\AM@@pagenumbers#1,#2{%
  \AM@pagearea#1-\END
  \ifx#2\END \def\AM@next{\relax}%
    \else \def\AM@next{\AM@@pagenumbers #2}%
  \fi
  \AM@next
}
%    \end{macrocode}
%    \macro{\AM@pagearea}
%    Parse arguments of option |pages|. One item can be be a single
%    page number or a whole area of page numbers (e.\,g.: |11-15|).
%    \begin{macrocode}
\newcommand{\AM@pagearea}{}
\def\AM@pagearea#1-#2\END{%
  \ifx\\#2\\%
    \AM@addtopagelist{#1}%
  \else
    \AM@last#2 
    \@tempcnta=#1
    \whiledo{\@tempcnta<\@tempcntb}{%
      \AM@addtopagelist{\the\@tempcnta}%
      \advance\@tempcnta by 1
    }%
  \fi}
\newcommand{\AM@last}{}
\def\AM@last#1-{%
  \@tempcntb=#1 \advance\@tempcntb by 1
  \def\lastpage{#1}%
}
%    \end{macrocode}
%    \macro{\AM@addtopagelist}
%    Add an item at the end of |\AM@pagelist|.
%    \begin{macrocode}
\newcommand{\AM@addtopagelist}{}
\def\AM@addtopagelist#1{%
  \let\saveAM@pagelist\AM@pagelist
  \edef\AM@pagelist{\saveAM@pagelist#1,}%
}
%    \end{macrocode}
%    \macro{\AM@openright}
%    Insert an empty item at the beginning of |\AM@pagelist|.
%    \begin{macrocode}
\newcommand{\AM@openright}{}
\def\AM@openright{\expandafter\AM@@openright\AM@pagelist}
\newcommand{\AM@@openright}{}
\def\AM@@openright#1\END{%
  \edef\AM@pagelist{,#1\noexpand\END}%
}
%    \end{macrocode}
%    \macro{\AM@getpages}
%    Read |#1| items (page numbers) from the beginning of
%    |\AM@pagelist| and delete them from the list.
%    If the next item in the list is |\END| set
%    |endofpagelist| to |true|.
%    \begin{macrocode}
\newcommand{\AM@getpages}{}
\def\AM@getpages#1{%
  \ifcase#1
    \or
    \expandafter\AM@getipages\AM@pagelist \or
    \expandafter\AM@getiipages\AM@pagelist \or\or
    \expandafter\AM@getivpages\AM@pagelist \fi
}

\newcommand{\AM@getipages}{}
\def\AM@getipages#1,#2\END{%
  \def\AM@pagei{#1}%
  %remove page from list
  \def\AM@pagelist{#2\END}%
  % checking end of list
  \ifx\\#2\\\setboolean{endofpagelist}{true}\fi
}
\newcommand{\AM@getiipages}{}
\def\AM@getiipages#1,#2,#3\END{%
  \def\AM@pagei{#1}%
  \def\AM@pageii{#2}%
  %remove pages from list
  \def\AM@pagelist{#3\END}%
  % checking end of list
  \ifx\\#3\\\setboolean{endofpagelist}{true}\fi
}
\newcommand{\AM@getivpages}{}
\def\AM@getivpages#1,#2,#3,#4,#5\END{%
  \def\AM@pagei{#1}%
  \def\AM@pageii{#2}%
  \def\AM@pageiii{#3}%
  \def\AM@pageiv{#4}%
  %remove pages from list
  \def\AM@pagelist{#5\END}%
  % checking end of list
  \ifx\\#5\\\setboolean{endofpagelist}{true}\fi
}
%    \end{macrocode}
%    \macro{\AM@countpagelist}
%    Count items in |\AM@pagelist|. The number
%    of items is stored in |\@tempcnta|.
%    \begin{macrocode}
\newcommand{\AM@countpagelist}{}
\def\AM@countpagelist{%
  \@tempcnta=0 \expandafter\AM@@countpagelist\AM@pagelist}
\newcommand{\AM@@countpagelist}{}
\def\AM@@countpagelist#1,#2{%
  \ifx#2\END\def\AM@next{\relax}%
    \else\def\AM@next{\AM@@countpagelist #2}%
  \fi
  \advance\@tempcnta by 1
  \AM@next
}
%    \end{macrocode}
%    \macro{\AM@filluppagelist}
%    Check, if the number of items in |\AM@pagelist| is a
%    multiple of |\AM@nup|. If not, fill up the list with
%    empty items.
%    \begin{macrocode}
\newcommand{\AM@filluppagelist}{}
\def\AM@filluppagelist{%
  \AM@countpagelist
  \@tempcntb=\@tempcnta
  \divide\@tempcntb by \AM@nup%
  \multiply\@tempcntb by \AM@nup%
  \advance\@tempcnta by -\@tempcntb
  \ifnum\@tempcnta=0
    \else
      \advance\@tempcnta by -\AM@nup%
      \multiply\@tempcnta by -1
  \fi
  \expandafter\AM@removeend\AM@pagelist
  \whiledo{\@tempcnta > 0}{%
    \let\saveAM@pagelist\AM@pagelist
    \edef\AM@pagelist{\saveAM@pagelist ,}%
    \advance\@tempcnta by -1
  }%
  \let\saveAM@pagelist\AM@pagelist
  \edef\AM@pagelist{\saveAM@pagelist\noexpand\END}%
}
%    \end{macrocode}
%    \macro{\AM@removeend}
%    Remove |\END| token from |\AM@pagelist|.
%    \begin{macrocode}
\newcommand{\AM@removeend}{}
\def\AM@removeend#1\END{%
  \let\saveAM@pagelist\AM@pagelist
  \edef\AM@pagelist{#1}%
}
%    \end{macrocode}
%    \macro{\AM@setphantom}
%    The first page number in |\AM@pagelist| will be used as
%    the page number of the phantom page. The box measures
%    of the phantom page will be used to create empty pages.
%    \begin{macrocode}
\newcommand{\AM@setphantom}{}
\def\AM@setphantom{\expandafter\AM@@setphantom\AM@pagelist}
\newcommand{\AM@@setphantom}{}
\def\AM@@setphantom#1,#2\END{%
  \ifx\\#1\\ \def\AM@next{\AM@@setphantom#2\END}% 
  \else 
    \edef\AM@phantompage{#1}%
    \def\AM@next{\relax}%
  \fi
  \AM@next
}
%    \end{macrocode}
%    \subsection{Options of \texttt{\protect\bslash includepdf}}
%    \begin{macrocode}
\define@key{Gin}{pages}{\def\AM@pagestemp{#1}}
\define@key{Gin}{nup}{\def\AM@nup{#1}}
\define@key{Gin}{deltax}{\AM@parse@deltax#1 \\}
\define@key{Gin}{deltay}{\AM@parse@deltay#1 \\}
\define@key{Gin}{offset}{\AM@parse@offset#1 \\}
\define@key{Gin}{frame}[true]{\setboolean{AM@frame}{#1}}
\define@key{Gin}{openright}[true]{\setboolean{AM@openright}{#1}}
\define@key{Gin}{pagecommand}{\renewcommand{\AM@pagecommand}{#1}}
\define@key{Gin}{rotate}{\def\AM@rotate{#1}}
\define@key{Gin}{landscape}[true]{\setboolean{AM@landscape}{#1}%
                                  \def\AM@lscape@roti{-90}%
                                  \def\AM@lscape@rotii{90}}
\define@key{Gin}{turn}[true]{\setboolean{AM@turn}{#1}}
\define@key{Gin}{firstpage}{\def\AM@firstpage{#1}%
                            \setboolean{AM@compatibility}{true}}
\define@key{Gin}{lastpage}{\def\AM@lastpage{#1}%
                           \setboolean{AM@compatibility}{true}}
\define@key{Gin}{thread}[true]{\setboolean{AM@thread}{#1}}
\define@key{Gin}{threadname}{\def\AM@threadname{#1}}
\define@key{Gin}{link}[true]{\setboolean{AM@link}{#1}}
\define@key{Gin}{linkfit}{\def\AM@linkfit{#1}}
\define@key{Gin}{linkname}{\def\AM@linkname{#1}}
\define@key{Gin}{linktodoc}[true]{\setboolean{AM@linktodoc}{#1}}
\define@key{Gin}{linktodocfit}{\def\AM@linktodocfit{#1}}
\define@key{Gin}{linkfilename}{\pdfstringdef\AM@linkfilename{#1}}
%    \end{macrocode}
%    \macro{\AM@parse@deltax}
%    \macro{\AM@parse@deltay}
%    \macro{\AM@parse@offset}
%    Parsing arguments. These lines are derived
%    from \texttt{graphicx.sty}.
%    \begin{macrocode}
\def\AM@parse@deltax#1 #2\\{\AMGin@defaultbp\AM@deltax{#1}}
%    \end{macrocode}
%    \begin{macrocode}
\def\AM@parse@deltay#1 #2\\{\AMGin@defaultbp\AM@deltay{#1}}
%    \end{macrocode}
%    \begin{macrocode}
\def\AM@parse@offset#1 #2 #3\\{%
  \AMGin@defaultbp\AM@xoffset{#1}%
  \AMGin@defaultbp\AM@yoffset{#2}}
%    \end{macrocode}
%    \begin{macrocode}
\def\AMGin@defaultbp#1#2{%
  \afterassignment\AMGin@def@bp\dimen@#2bp\relax{#1}{#2}}
%    \end{macrocode}
%    \begin{macrocode}
\def\AMGin@def@bp#1\relax#2#3{%
   \if!#1!%
     \def#2{#3bp}%
    \else
      \dimen@.99626\dimen@
      \edef#2{\strip@pt\dimen@ bp}%
    \fi}
%    \end{macrocode}
%
%
%    \begin{thebibliography}{1}
%    \bibitem{pdftex}
%      H\`an Th\^e\llap{\raise 0.5ex\hbox{\'{}}} Th\`anh,
%      Sebastian Rahtz, Hans Hagen,
%      \textit{The pdfTeX user manual},
%      http://www.tug.org/applications/pdftex/pdftex-s.pdf
%    \bibitem{PDFRef} \textit{PDF Reference}, Second Edition,
%      Adobe Systems Incorporated,\\
%      http://partners.adobe.com/asn/developer/acrosdk/DOCS/PDFRef.pdf
%    \end{thebibliography}
%
%
%    \section{History}
%
%    \subsection*{2001/01/17 v0.1b}
%    \begin{itemize}
%      \item The first released version.
%    \end{itemize}
%
%    \subsection*{2001/02/03 v0.1c}
%    \begin{itemize}
%      \item Pages are being centered automatically.
%    \end{itemize}
%
%    \subsection*{2001/03/10 v0.1e}
%    \begin{itemize}
%      \item Support of landscape format.
%      \item The |offset| option recognizes the class option |twoside|.
%    \end{itemize}
%
%    \subsection*{2001/03/16 v0.1f}
%    \begin{itemize}
%      \item Option |pages| added.
%    \end{itemize}
%
%    \subsection*{2001/04/07 v0.1h}
%    \begin{itemize}
%      \item Hypertext operations added. The included pages can be
%            targets for hyperlinks, they can be linked to the
%            original document and they can be joined to threads.
%    \end{itemize}
%    \iffalse
%</package>
%    \fi
%
%    \Finale
%
%    \iffalse
%<*example1>
\documentclass[a4paper,12pt, draft]{article}
\usepackage[final]{pdfpages}
%% Uncomment the following lines, if you want to produce thumbnails.
%%\usepackage{pdflscape}
%%\usepackage{thumbpdf}
\usepackage{verbatim}

\newcounter{example}
\setcounter{example}{1}

\newenvironment{example}
  {\par\vskip\topsep%
   \noindent\textbf{Example \arabic{example}:}%
   \stepcounter{example}%
   \par\vskip\topsep%
   \minipage{.9\linewidth}%
   \verbatim}
  {\endverbatim%
   \endminipage\par}

\begin{document}

\title{Demonstration of the \texttt{pdfpages} Package}
\author{Andreas MATTHIAS}
\maketitle

This is a demonstration of the \texttt{pdfpages} package.
It is \textit{not} the documentation of the package.
To get the documentation run: `latex pdfpages.dtx'

\tableofcontents

\section{Including Pages:}
\begin{example}
\includepdf[pages={3-5}]{dummy}
\end{example}
\includepdf[pages={3-5}]{dummy}


\section{Using the \texttt{nup} Option}
Arranging two logical pages on one physical sheet of paper.

\begin{example}
\includepdf[nup=2, pages={4-7}]{dummy}
\end{example}
\includepdf[nup=2, pages={4-7}]{dummy}

Use the option \texttt{turn=false}, if the pages
should not be displayed in landscape orientation.
(If the last two pages were not displayed in
landscape orientation, you use a PDF viewer that
does not support this option.)

\begin{example}
\includepdf[nup=2, pages={4-7}, turn=false]{dummy}
\end{example}
\includepdf[nup=2, pages={4-7}, turn=false]{dummy}

\noindent
Arranging four logical pages on one physical sheet of paper.

\begin{example}
\includepdf[nup=4, pages={4-7}]{dummy}
\end{example}
\includepdf[nup=4, pages={4-7}]{dummy}

\noindent
Sometimes it might be useful to put the first page
on the right side. This can be done with the \texttt{openright} Option.
\begin{example}
\includepdf[nup=4, pages={5-7}, openright]{dummy}
\end{example}
\includepdf[nup=4, pages={5-7}, openright]{dummy}

\section{The \texttt{landscape} Mode}

If the pages to include are in landscape format, use the
option \texttt{landscape}.

\begin{example}
\includepdf[nup=2, landscape, pages={1,2}]{dummy-l}
\end{example}
\includepdf[nup=2, landscape, pages={1,2}]{dummy-l}

\section{Changing Layout}

To put same space between the logical pages, use the options
\texttt{deltax} and \texttt{deltay}, which set the
horizontal and vertical space between the pages.

Any options of \verb|\includegraphics| are allowed in
\verb|\includepdf| as well. See the \texttt{scale}
option in the next example.

\begin{example}
\includepdf[nup=4, pages={3-6}, scale=.8,
            deltax=8mm, deltay=11mm, frame]{dummy}
\end{example}


\small
A short explanation about \texttt{scale} in the above
example:
To put four pages on one physical sheet of paper, the
pages are scaled by $0.5$. This is done internally in
\verb|\includepdf|. The item \texttt{scale=.8} in the
above example is an additional scale operation. This
means that on the whole the pages are scale by $0.5$
\textit{and} $0.8$.

If the included paper format is A4 (\texttt{a4paper}),
which has a width of $210\,$mm, the pages are scaled to
a width of $84\,$mm:
$$210\,\mathrm{mm} \times 0.5 \times 0.8 = 84\,\mathrm{mm}$$
\normalsize

\includepdf[nup=4, pages={3-6}, scale=.8,
            deltax=8mm, deltay=11mm, frame]{dummy}

\noindent
The same with pages in landscape format.

\begin{example}
\includepdf[nup=4, pages={1-4}, scale=.8,
            deltax=8mm, deltay=11mm,
            frame, landscape]{dummy-l}
\end{example}
\includepdf[nup=4, pages={1-4}, scale=.8,
            deltax=8mm, deltay=11mm,
            frame, landscape]{dummy-l}


\noindent
The output is centered by default as you could see in
the last examples. With the \texttt{offset} option it is
possible to displace the output.

\begin{example}
\includepdf[nup=4, pages={3-6}, scale=.8,
            offset=5mm 7mm, frame]{dummy}
\end{example}
\includepdf[nup=4, pages={3-6}, scale=.8,
            offset=5mm 7mm, frame]{dummy}


\noindent
To remove the header and the footer of the included
document use the \texttt{trim} and \texttt{clip}
options of the \texttt{graphicx} package.

\begin{example}
\includepdf[page=3, trim=0 40mm 0 40mm,
            clip, pagecommand={}]{dummy}
\end{example}


The option
\verb|pagecommand={\thispagestyle{empty}}|
is set by default. If you don't want the pagestyle
to be set to empty, you can remove this default 
setting by using the \texttt{pagecommand} option
as follows:
\verb|pagecommand={}|

\includepdf[page=3, trim=0 40mm 0 40mm,
            clip, pagecommand={}]{dummy}


\noindent
You like the crazy way? Then try this one \texttt{;-)}
\begin{example}
\includepdf[pages={3-4}, nup=2,
            landscape, scale=.8,
            angle=30, deltay=-60mm]{dummy-l}
\end{example}
\includepdf[pages={3-4}, nup=2,
            landscape, scale=.8,
            angle=30, deltay=-60mm]{dummy-l}


\end{document}
%</example1>
%
%
%
%<*example2>
\documentclass[a4paper,12pt]{article}
\usepackage[final]{pdfpages}
%% Uncomment the following lines, if you want to produce thumbnails.
%%\usepackage{pdflscape}
%%\usepackage{thumbpdf}
\usepackage{verbatim}
\usepackage[bookmarksopen]{hyperref}

\newcounter{example}
\setcounter{example}{1}

\newenvironment{example}
  {\par\vskip\topsep%
   \noindent\textbf{Example \arabic{example}:}%
   \stepcounter{example}%
   \par\vskip\topsep%
   \minipage{.9\linewidth}%
   \verbatim}
  {\endverbatim%
   \endminipage\vskip\topsep}

\newcommand{\meta}[1]{\ensuremath\langle\texttt{#1}\ensuremath\rangle}
\newcommand{\link}[2]{\meta{#1}.\meta{#2}}

\newcommand*{\bookmark}[3][0]{%
  \pdfoutline user {<< /S /GoTo /D (#3) >>} count #1 {#2}}

\begin{document}

\title{Demonstration of the Hypertext Operations\\ of the \texttt{pdfpages} Package}
\author{Andreas MATTHIAS}
\maketitle

This is a demonstration of the \texttt{pdfpages} package.
It is \textit{not} the documentation of the package.
To get the documentation run: `latex pdfpages.dtx'

\tableofcontents

\section{Hyperlinks}
\subsection{Links to the included Pages}

Hyperlinks are created by using the option \texttt{link}
of the \verb|\includepdf| command. Each included page
gets a linkname consisting of the filename and
the page number: \link{filename}{page number}

\begin{example}
\includepdf[pages={1-2}, link]{dummy}
\end{example}

In this example the two pages have the linknames
`\texttt{dummy.1}' and `\texttt{dummy.2}'.
Setting links to these
pages, can be done easily with the \verb|\hyperlink|
macro from the \texttt{hyperref.sty} package:

\bigskip
\verb|\hyperlink{dummy.1}{Page 1}|\hskip10pt \hyperlink{dummy.1}{Page 1}\par
\verb|\hyperlink{dummy.2}{Page 2}|\hskip10pt \hyperlink{dummy.2}{Page 2}
\bigskip

This way you can refer to the \hyperlink{dummy.1}{first}
and the \hyperlink{dummy.2}{second page}.

\includepdf[pages={1-2}, link]{dummy}
\bookmark[4]{List of Hyperfigures}{}
\bookmark[0]{Page 1}{dummy.1}
\bookmark[0]{Page 2}{dummy.2}


Including the same page twice would result in two 
identical linknames. To prevent this use the option
\texttt{linkname} to specify another name for the links.

\begin{example}
\includepdf[pages={1-2}, nup=2, link, linkname=mylink]{dummy}
\end{example}

\noindent
Now the links are called `\texttt{mylink.1}' and
`\texttt{mylink.2}'.

\bigskip
\verb|\hyperlink{mylink.1}{Page 1}|\hskip10pt \hyperlink{mylink.1}{Page 1}\par
\verb|\hyperlink{mylink.2}{Page 2}|\hskip10pt \hyperlink{mylink.2}{Page 2}

\includepdf[pages={1-2}, nup=2, link, linkname=mylink]{dummy}
\bookmark[0]{Again Page 1}{mylink.1}
\bookmark[0]{Again Page 2}{mylink.2}


\subsection{Links to the original Document}

Each page can be a hyperlink to the document from
which it was extracted. This can be done with the
option \texttt{linktodoc}.

Click on the included pages and see what happens.

\begin{example}
\includepdf[pages={1-4}, nup=4, linktodoc]{dummy}
\end{example}
\includepdf[pages={1-4}, nup=4, linktodoc]{dummy}


\section{Article Threads}

In a PDF document one or more article threads may be defined.
An article thread is a logical connected sequence of content
items.

With the option \texttt{thread} the included pages become
an article thread.

\begin{example}
\includepdf[pages={1-4}, nup=4, landscape, thread]{dummy-l}
\end{example}

In Acrobat Reader the mouse pointer changes to a hand with
a little arrow in it when moved over an article thread.
By clicking on the page you can easily follow the logical
structure of the article thread.

\includepdf[pages={1-4}, nup=4, landscape, thread]{dummy-l}

\end{document}
%</example2>
%\fi
\endinput
